<?xml version="1.0" encoding="UTF-8"?><beans xmlns:context="http://www.springframework.org/schema/context"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:p="http://www.springframework.org/schema/p"       xmlns:aop="http://www.springframework.org/schema/aop" xmlns="http://www.springframework.org/schema/beans"       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">    <!-- 开启注解扫描 -->    <context:annotation-config/>    <!-- 配置文件 -->    <context:property-placeholder location="classpath*:db.properties"/>    <bean id="prop" class="org.springframework.beans.factory.config.PropertiesFactoryBean">        <property name="locations">            <array>                <value>classpath*:db.properties</value>            </array>        </property>    </bean>    <!-- 定义切面功能 -->    <aop:aspectj-autoproxy/>    <!-- 注解扫面包路径 -->    <context:component-scan base-package="com.hs3"/>    <!-- 内存服务器 -->    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">        <constructor-arg index="0">            <bean class="redis.clients.jedis.JedisPoolConfig">                <property name="maxIdle" value="${redis.maxIdle}"/>                <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>                <property name="maxTotal" value="${redis.maxTotal}"/>                <property name="testOnBorrow" value="${redis.testOnBorrow}"/>                <property name="testOnReturn" value="${redis.testOnReturn}"/>            </bean>        </constructor-arg>        <constructor-arg index="1" value="${redis.ip}" type="java.lang.String"/>        <constructor-arg index="2" value="${redis.port}" type="int"/>    </bean>    <!-- 数据源配置, 使用 Druid 数据库连接池 -->    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->        <property name="driverClassName" value="${db.driver}"/>        <!-- 基本属性 url、user、password -->        <property name="url" value="${db.url}"/>        <property name="username" value="${db.user}"/>        <property name="password" value="${db.pass}"/>        <!-- 配置初始化大小、最小、最大 -->        <property name="initialSize" value="${db.init}"/>        <property name="minIdle" value="${db.min}"/>        <property name="maxActive" value="${db.max}"/>        <!-- 配置获取连接等待超时的时间 -->        <property name="maxWait" value="6000"/>        <!-- 配置maxWait后 会使用公平锁，并发性能降下，可配置useUnfairLock=true，是否非公平锁 -->        <!-- 		<property name="useUnfairLock" value="true"/> -->        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->        <property name="timeBetweenEvictionRunsMillis" value="60000"/>        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->        <property name="minEvictableIdleTimeMillis" value="300000"/>        <property name="validationQuery" value="SELECT 1 FROM DUAL"/>        <property name="testWhileIdle" value="true"/>        <property name="testOnBorrow" value="false"/>        <property name="testOnReturn" value="false"/>        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）        <property name="poolPreparedStatements" value="true" />        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->        <!-- 配置监控统计拦截的filters -->        <property name="filters" value="stat"/>        <!-- 监控统计拦截的filters -->        <!--         <property name="proxyFilters">   -->        <!--             <list>   -->        <!--                 <ref bean="stat-filter" /> -->        <!--             </list> -->        <!--         </property> -->    </bean>    <!-- 慢SQL记录-->    <!--     <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">   -->    <!--         <property name="mergeSql" value="false" />   -->    <!--         <property name="slowSqlMillis" value="5000" /> -->    <!--         <property name="logSlowSql" value="true" /> -->    <!--     </bean> -->    <!-- 配置Jdbc模板 -->    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">        <property name="dataSource" ref="dataSource"></property>    </bean>    <!-- 配置事务管理器 -->    <bean id="transactionManager"          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"          p:dataSource-ref="dataSource"/>    <bean id="transactionInterceptor"          class="org.springframework.transaction.interceptor.TransactionInterceptor">        <property name="transactionManager" ref="transactionManager"/>        <!-- ,-Exception -->        <property name="transactionAttributes">            <props>                <!-- 事务 -->                <prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>                <prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>                <prop key="create*">PROPAGATION_REQUIRED,-Exception</prop>                <prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>                <prop key="set*">PROPAGATION_REQUIRED,-Exception</prop>                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>                <prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>                <prop key="modify*">PROPAGATION_REQUIRED,-Exception</prop>                <prop key="edit*">PROPAGATION_REQUIRED,-Exception</prop>                <prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop>                <prop key="excute*">PROPAGATION_REQUIRED,-Exception</prop>                <!-- 不使用事务 -->                <prop key="*">PROPAGATION_SUPPORTS</prop>                <!-- 				<prop key="get*">PROPAGATION_SUPPORTS</prop> -->                <!-- 				<prop key="find*">PROPAGATION_SUPPORTS</prop> -->                <!-- 				<prop key="select*">PROPAGATION_SUPPORTS</prop> -->                <!-- 				<prop key="check*">PROPAGATION_SUPPORTS</prop> -->                <!-- 				<prop key="is*">PROPAGATION_SUPPORTS</prop> -->                <!-- 其他使用只读事务 -->                <!-- 				<prop key="*">PROPAGATION_SUPPORTS,readOnly</prop> -->            </props>        </property>    </bean>    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">        <property name="beanNames">            <list>                <value>*Service</value>            </list>        </property>        <property name="interceptorNames">            <value>transactionInterceptor</value>        </property>    </bean>    <context:component-scan base-package="com.hs"/>    <bean id="exceptionResolver" class="com.hs3.web.exceptions.MyHandlerExceptionResolver">        <property name="debug" value="false"/>        <property name="page" value="/home/error/500"/>    </bean>    <!-- 这里不配置其他，使得前端WEB不启动任务 -->    <bean name="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"/>    <!-- 配置druid监控spring jdbc -->    <!--     <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" /> -->    <!--     <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype"> -->    <!--         <property name="patterns"> -->    <!--             <list> -->    <!--                 <value>com.hs3.service.*</value> -->    <!--                 <value>com.hs3.service.*.*</value> -->    <!--             </list> -->    <!--         </property> -->    <!--     </bean> -->    <!--     <aop:config proxy-target-class="true"> -->    <!--         <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" /> -->    <!--     </aop:config> -->    <!-- 数据源配置, 使用 Druid 数据库连接池 -->    <bean id="logDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->        <property name="driverClassName" value="${db.driver}"/>        <!-- 基本属性 url、user、password -->        <property name="url" value="${db.log.url}"/>        <property name="username" value="${db.user}"/>        <property name="password" value="${db.pass}"/>        <!-- 配置初始化大小、最小、最大 -->        <property name="initialSize" value="${db.log.init}"/>        <property name="minIdle" value="${db.log.min}"/>        <property name="maxActive" value="${db.log.max}"/>        <!-- 配置获取连接等待超时的时间 -->        <property name="maxWait" value="60000"/>        <!-- 配置maxWait后 会使用公平锁，并发性能降下，可配置useUnfairLock=true，是否非公平锁 -->        <!-- 		<property name="useUnfairLock" value="true"/> -->        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->        <property name="timeBetweenEvictionRunsMillis" value="60000"/>        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->        <property name="minEvictableIdleTimeMillis" value="300000"/>        <property name="validationQuery" value="SELECT 1 FROM DUAL"/>        <property name="testWhileIdle" value="true"/>        <property name="testOnBorrow" value="false"/>        <property name="testOnReturn" value="false"/>        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）        <property name="poolPreparedStatements" value="true" />        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->        <!-- 配置监控统计拦截的filters -->        <property name="filters" value="stat"/>        <!-- 监控统计拦截的filters -->        <!--         <property name="proxyFilters">   -->        <!--             <list>   -->        <!--                 <ref bean="stat-filter" /> -->        <!--             </list> -->        <!--         </property> -->    </bean>    <!-- 慢SQL记录-->    <!--     <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">   -->    <!--         <property name="mergeSql" value="false" />   -->    <!--         <property name="slowSqlMillis" value="5000" /> -->    <!--         <property name="logSlowSql" value="true" /> -->    <!--     </bean> -->    <!-- 配置Jdbc模板 -->    <bean id="logJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">        <property name="dataSource" ref="logDataSource"></property>    </bean></beans>