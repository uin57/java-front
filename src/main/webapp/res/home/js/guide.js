/** * Created by gong on 2016/7/27. * * guide the user familiar with the platform * */var guideItem = [],    currStep;var guide = {    start: function () {        ready.call(this);        return this;    }};function ready() {    //start guide    var allGuideList = document.querySelectorAll('.guideStep');    currStep = undefined;    for (var i = 0; i < allGuideList.length; i++) {        var guideEle = allGuideList[i];        var step = parseInt(guideEle.getAttribute('data-step'), 10);        //sort guide steps        if (step > 0) {            guideItem[step - 1] = {                ele: guideEle,                step: parseInt(guideEle.getAttribute('data-step'), 10),                float: guideEle.getAttribute('data-float'),                className: guideEle.getAttribute('data-class')            }        }    }    nextStep.call(this);    //window resize, set guide layer position    window.onResize = function () {        setGuideLayerPos.call(this, document.querySelector('#guideIntroMaskLayer'), guideItem[currStep]);//mask layer        setGuideLayerPos.call(this, document.querySelector('#guideIntroLayer'), guideItem[currStep]);//intro layer    };    //keyDown event: left, right    window.keyDown = function (e) {        if (e.keyCode == 37) {            //left            prevStep.call(this);        } else if (e.keyCode == 39) {            //right            nextStep.call(this);        }    };    //add event listeners    if (window.addEventListener) {//chrome        window.addEventListener('keydown', window.keyDown, true);        window.addEventListener('resize', window.onResize, true);    } else if (document.attachEvent) { //IE        document.attachEvent('onkeydown', window.keyDown);        document.attachEvent('onresize', window.onResize);    }}//next stepfunction nextStep() {    if (typeof(currStep) === 'undefined') {        currStep = 0;    } else {        ++currStep;    }    // guide end    if (currStep >= guideItem.length) {        $('#guideIntroLayer, #guideIntroMaskLayer').hide();        $('.guideStep').each(function () {            $(this).removeClass('highLightGuide');        });        $('#guideEndBox').show();        //clean listeners        if (window.removeEventListener) {            window.removeEventListener('keydown', window.keyDown, true);            window.removeEventListener('resize', window.onResize, true);        } else if (document.detachEvent) { //IE            document.detachEvent('onkeydown', window.keyDown);            document.detachEvent('onresize', window.onResize);        }        return;    }    showElement.call(this, guideItem[currStep]);}//prev stepfunction prevStep() {    if (currStep == 0) {        guideStartInfo();        //clean listeners        if (window.removeEventListener) {            window.removeEventListener('keydown', window.keyDown, true);            window.removeEventListener('resize', window.onResize, true);        } else if (document.detachEvent) { //IE            document.detachEvent('onkeydown', window.keyDown);            document.detachEvent('onresize', window.onResize);        }        return;    } else {        --currStep;    }    showElement.call(this, guideItem[currStep]);}//show elementfunction showElement(currEle) {    var guideMaskLayer = document.querySelector('#guideIntroMaskLayer');//mask    var guideIntroLayer = document.querySelector('#guideIntroLayer');//all guide layer    var guideIntroTip = document.querySelector('.guideStepListBox');//intro tip    //初始化各层的位置    setGuideLayerPos.call(this, guideMaskLayer, currEle);//mask layer    setGuideLayerPos.call(this, guideIntroLayer, currEle);//intro layer    //add class name    guideIntroTip.setAttribute('class', 'guideStepListBox ' + currEle.className);    //prev button    $('.prevStep').remove();    var prevStepBtn = document.createElement('a');    prevStepBtn.href = 'javascript:;';    prevStepBtn.className = 'prevStep animateBox';    prevStepBtn.onclick = function () {        if (currStep <= guideItem.length - 1) {            prevStep.call(this);        }    };    //next button    $('.nextStep').remove();    var nextStepBtn = document.createElement('a');    nextStepBtn.href = 'javascript:;';    nextStepBtn.className = 'nextStep animateBox';    nextStepBtn.onclick = function () {        if (currStep <= guideItem.length - 1) {            nextStep.call(this);        }    };    //add button    $(guideIntroTip).find('.guideStepNavList').append(prevStepBtn).append(nextStepBtn);    //add step nav    $(guideIntroTip).find('.guideStepNav').html('');    for (var k = 0; k < guideItem.length; k++) {        var stepNav = document.createElement('span');        stepNav.className = 'stepNav';        if (k == currStep) {            stepNav.className = 'stepNav active';        }        $(guideIntroTip).find('.guideStepNav').append(stepNav);    }    //high light show element    $(guideItem).each(function () {        $(this.ele).removeClass('highLightGuide');    });    $(currEle.ele).addClass('highLightGuide');    //window position    var winSize = getWinSize();    setWinPos(currEle, winSize);    guideMaskLayer.style.display = 'block';    guideIntroLayer.style.display = 'block';}// set guide layer positionfunction setGuideLayerPos(maskEle, currEle) {    if (maskEle) {        var elePos = getOffset(currEle.ele);        //float layer position        if (currEle.float == 'true') {            var floatEle = currEle.ele.querySelector('.guideStepFloat');            floatEle.style.display = 'block';            var floatPos = getOffset(floatEle);            floatEle.removeAttribute('style');            elePos.width = floatPos.width;            elePos.height += floatPos.height;        }        $(maskEle).css({            'top': elePos.top,            'left': elePos.left,            'width': elePos.width,            'height': elePos.height        });        return elePos;    }}//get element positionfunction getOffset(ele, parent) {    var elePos = {},        topCount = true;    parent = parent ? parent : false;    elePos.width = ele.offsetWidth;    elePos.height = ele.offsetHeight;    var top = 0;    var left = 0;    while (ele && !isNaN(ele.offsetLeft) && !isNaN(ele.offsetTop)) {        top += ele.offsetTop;        if ((ele.className != 'areaBigContainer' && topCount) || parent) {            left += ele.offsetLeft;        } else {            topCount = false;        }        ele = ele.offsetParent;    }    elePos.top = top;    elePos.left = left;    return elePos;}//get window sizefunction getWinSize() {    if (window.innerWidth != 'undefined') {        return {width: window.innerWidth, height: window.innerHeight};    } else {        var win = document.documentElement;        return {width: win.clientWidth, height: win.clientHeight};    }}//set window positionfunction setWinPos(currEle, winSize) {    var rect = currEle.ele.getBoundingClientRect(),        top = rect.bottom - (rect.bottom - rect.top),        bottom = rect.bottom - winSize.height;    if (top < 0 || currEle.ele.clientHeight > winSize.height) {        //scroll up        window.scrollBy(0, top - 100); // 30px padding from edge to look nice    } else {        //Scroll down        window.scrollBy(0, bottom + 100); // 70px + 30px padding from edge to look nice    }}